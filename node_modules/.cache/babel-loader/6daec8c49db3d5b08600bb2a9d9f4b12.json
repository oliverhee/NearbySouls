{"ast":null,"code":"var _jsxFileName = \"/Users/guoqinghe/Desktop/LaiOffer/around-web/src/components/Home.js\";\nimport React from 'react';\nimport { Tabs, Button, Spin } from 'antd';\nimport { GEO_OPTIONS, POS_KEY, API_ROOT, AUTH_HEADER, TOKEN_KEY } from '../constants';\nimport Gallery from './Gallery';\nconst {\n  TabPane\n} = Tabs;\n\nclass Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoadingGeoLocation: false,\n      isLoadingPosts: false,\n      error: '',\n      posts: []\n    };\n\n    this.onSuccessLoadGeoLocation = position => {\n      console.log(position);\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      localStorage.setItem(POS_KEY, JSON.stringify({\n        lat: latitude,\n        lon: longitude\n      }));\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: ''\n      });\n      this.loadNearbyPosts();\n    };\n\n    this.onFailedLoadGeoLocation = () => {\n      this.setState({\n        isLoadingGeoLocation: false,\n        error: 'Failed to load geo location.'\n      });\n    };\n\n    this.loadNearbyPosts = () => {\n      const {\n        lat,\n        lon\n      } = JSON.parse(localStorage.getItem(POS_KEY));\n      const token = localStorage.getItem(TOKEN_KEY);\n      this.setState({\n        isLoadingPosts: true,\n        error: ''\n      });\n      return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=20000`, {\n        method: 'GET',\n        headers: {\n          Authorization: `${AUTH_HEADER} ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error('Failed to load post.');\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          posts: data ? data : [],\n          isLoadingPosts: false\n        });\n      }).catch(e => {\n        console.error(e);\n        this.setState({\n          isLoadingPosts: false,\n          error: e.message\n        });\n      });\n    };\n  }\n\n  // When the component is rendered to the DOM for the first time\n  // such as at page load we call the Geolocation API to determine\n  // a latitude and longitude for the browser\n  componentDidMount() {\n    console.log(navigator.geolocation);\n\n    if (\"geolocation\" in navigator) {\n      this.setState({\n        isLoadingGeoLocation: true,\n        error: ''\n      });\n      navigator.geolocation.getCurrentPosition(this.onSuccessLoadGeoLocation, this.onFailedLoadGeoLocation, GEO_OPTIONS);\n    } else {\n      this.setState({\n        error: 'Geolocation is not supported.'\n      });\n    }\n  }\n\n  renderImagePosts() {\n    const {\n      error,\n      isLoadingGeoLocation,\n      isLoadingPosts,\n      posts\n    } = this.state;\n\n    if (error) {\n      return error;\n    } else if (isLoadingGeoLocation) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading geo location...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }\n      });\n    } else if (isLoadingPosts) {\n      return /*#__PURE__*/React.createElement(Spin, {\n        tip: \"Loading posts...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 20\n        }\n      });\n    } else if (posts.length > 0) {\n      const images = posts.map(post => {\n        return {\n          user: post.user,\n          src: post.url,\n          thumbnail: post.url,\n          caption: post.message,\n          thumbnailWidth: 400,\n          thumbnailHeight: 300\n        };\n      });\n      return /*#__PURE__*/React.createElement(Gallery, {\n        images: images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return 'No nearby posts';\n    }\n  }\n\n  render() {\n    const operations = /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 28\n      }\n    }, \"Create New Post\");\n    return /*#__PURE__*/React.createElement(Tabs, {\n      tabBarExtraContent: operations,\n      className: \"main-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Image Posts\",\n      key: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, this.renderImagePosts()), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Video Posts\",\n      key: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, \"Content of tab 2\"), /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"Map\",\n      key: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Content of tab 3\"));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/guoqinghe/Desktop/LaiOffer/around-web/src/components/Home.js"],"names":["React","Tabs","Button","Spin","GEO_OPTIONS","POS_KEY","API_ROOT","AUTH_HEADER","TOKEN_KEY","Gallery","TabPane","Home","Component","state","isLoadingGeoLocation","isLoadingPosts","error","posts","onSuccessLoadGeoLocation","position","console","log","latitude","longitude","coords","localStorage","setItem","JSON","stringify","lat","lon","setState","loadNearbyPosts","onFailedLoadGeoLocation","parse","getItem","token","fetch","method","headers","Authorization","then","response","ok","json","Error","data","catch","e","message","componentDidMount","navigator","geolocation","getCurrentPosition","renderImagePosts","length","images","map","post","user","src","url","thumbnail","caption","thumbnailWidth","thumbnailHeight","render","operations"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Tabs, Button, Spin } from 'antd';\nimport { GEO_OPTIONS, POS_KEY, API_ROOT, AUTH_HEADER, TOKEN_KEY } from '../constants'\n\nimport Gallery from './Gallery';\n\nconst { TabPane } = Tabs;\n\nclass Home extends React.Component {\n    state = {\n        isLoadingGeoLocation: false,\n        isLoadingPosts: false,\n        error: '',\n        posts: [],\n    }\n\n    // When the component is rendered to the DOM for the first time\n    // such as at page load we call the Geolocation API to determine\n    // a latitude and longitude for the browser\n    componentDidMount() {\n        console.log(navigator.geolocation);\n        if (\"geolocation\" in navigator) {\n            this.setState({ isLoadingGeoLocation: true, error: '' });\n            navigator.geolocation.getCurrentPosition(\n                this.onSuccessLoadGeoLocation,\n                this.onFailedLoadGeoLocation,\n                GEO_OPTIONS,\n            );\n        } else {\n            this.setState({ error: 'Geolocation is not supported.'});\n        }\n    }\n\n    onSuccessLoadGeoLocation = (position) => {\n        console.log(position);\n        const { latitude, longitude } = position.coords;\n        localStorage.setItem(POS_KEY, JSON.stringify({ lat: latitude, lon: longitude }));\n        this.setState({ isLoadingGeoLocation: false, error: '' });\n        this.loadNearbyPosts();\n    }\n\n    onFailedLoadGeoLocation = () => {\n        this.setState({ isLoadingGeoLocation: false, error: 'Failed to load geo location.' });\n    }\n\n    loadNearbyPosts = () => {\n        const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({ isLoadingPosts: true, error: '' });\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=20000`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error('Failed to load post.');\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\n            })\n            .catch((e) => {\n                console.error(e);\n                this.setState({ isLoadingPosts: false, error: e.message });\n            });\n    }\n\n    renderImagePosts() {\n        const { error, isLoadingGeoLocation, isLoadingPosts, posts } = this.state;\n        if (error) {\n            return error;\n        } else if (isLoadingGeoLocation) {\n            return <Spin tip=\"Loading geo location...\"/>;\n        } else if (isLoadingPosts) {\n            return <Spin tip=\"Loading posts...\"/>\n        } else if (posts.length > 0) {\n            const images = posts.map((post) => {\n                return {\n                    user: post.user,\n                    src: post.url,\n                    thumbnail: post.url,\n                    caption: post.message,\n                    thumbnailWidth: 400,\n                    thumbnailHeight: 300,\n                };\n            });\n            return <Gallery images={images}/>\n        } else {\n            return 'No nearby posts';\n        }\n    }\n\n\n    render() {\n        const operations = <Button type=\"primary\">Create New Post</Button>;\n        return (\n            <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\n                <TabPane tab=\"Image Posts\" key=\"1\">\n                    {this.renderImagePosts()}\n                </TabPane>\n                <TabPane tab=\"Video Posts\" key=\"2\">\n                    Content of tab 2\n                </TabPane>\n                <TabPane tab=\"Map\" key=\"3\">\n                    Content of tab 3\n                </TabPane>\n            </Tabs>\n        );\n    }\n}\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}